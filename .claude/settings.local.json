{
  "permissions": {
    "allow": [
      "Bash(pkill:*)",
      "Bash(PIPELINE_ENABLED=false iex -S mix)",
      "Bash(chmod:*)",
      "Bash(PIPELINE_ENABLED=false MIX_ENV=dev iex -S mix -e \"\n# Test the test data generator\nkillmail = EveDmv.Killmails.TestDataGenerator.generate_sample_killmail()\nIO.inspect(killmail, label: \\\"Generated Killmail\\\")\n\n# Test pipeline test helper\nEveDmv.Killmails.PipelineTest.check_database_status()\n\")",
      "Bash(PIPELINE_ENABLED=false MIX_ENV=test mix run -e \"\n# Test basic data generation\nkillmail = EveDmv.Killmails.TestDataGenerator.generate_sample_killmail()\nIO.puts(\\\"✅ Test data generator works\\\")\n\n# Test pipeline test utilities  \n{:ok, status} = EveDmv.Killmails.PipelineTest.check_database_status()\nIO.puts(\\\"✅ Database status check works\\\")\nIO.puts(\\\"Raw killmails: #{status.raw_count}\\\")\n\")",
      "Bash(mix deps.get:*)",
      "Bash(PIPELINE_ENABLED=false MIX_ENV=test mix run -e \"\n# Test basic data generation\nkillmail = EveDmv.Killmails.TestDataGenerator.generate_sample_killmail()\nIO.puts(\\\"✅ Test data generator works - killmail ID: #{killmail[\\\"killmail_id\\\"]}\\\")\n\n# Test pipeline test utilities  \n{:ok, status} = EveDmv.Killmails.PipelineTest.check_database_status()\nIO.puts(\\\"✅ Database status check works\\\")\nIO.puts(\\\"Raw killmails: #{status.raw_count}\\\")\nIO.puts(\\\"Enriched killmails: #{status.enriched_count}\\\")\nIO.puts(\\\"Participants: #{status.participants_count}\\\")\n\")",
      "Bash(PIPELINE_ENABLED=false mix run --no-compile -e \"\n# Test SSE parsing directly\nrequire Logger\n\n# Test the SSE parser with the exact data that was causing issues\nevent_data = \\\"data: {\\\\\\\"event\\\\\\\": \\\\\\\"connected\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"SSE stream connected\\\\\\\"}\\\"\n\nresult = EveDmv.Killmails.SSEProducer.parse_single_event(event_data)\nIO.inspect(result, label: \\\"SSE Parse Result\\\")\n\")",
      "Bash(timeout 15s mix phx.server 2 >& 1)",
      "Bash(timeout:*)",
      "Bash(PIPELINE_ENABLED=false timeout 30s mix phx.server 2 >& 1)",
      "Bash(find:*)",
      "Bash(mix phx.server:*)",
      "Bash(ls:*)",
      "Bash(export WANDERER_KILLS_SSE_URL=\"http://host.docker.internal:4004/api/v1/kills/stream\")",
      "Bash(export MOCK_SSE_SERVER_ENABLED=\"false\")",
      "Bash(curl:*)",
      "Bash(echo:*)",
      "Bash(make:*)",
      "Bash(MIX_ENV=dev mix phx.server)",
      "Bash(unset MOCK_SSE_SERVER_ENABLED)",
      "Bash(ELIXIR_ERL_OPTIONS=\"+pc unicode\" MIX_ENV=dev mix phx.server)",
      "Bash(MIX_ENV=dev iex -S mix)",
      "Bash(fuser:*)",
      "Bash(true)",
      "Bash(mix ecto.psql:*)",
      "Bash(mix credo:*)",
      "Bash(mix format)",
      "Bash(mix compile)",
      "Bash(mix test)",
      "Bash(mix dialyzer:*)",
      "Bash(mix deps.outdated:*)",
      "Bash(mix hex.outdated:*)",
      "Bash(mix deps.update:*)",
      "Bash(docker compose:*)",
      "Bash(mix test:*)",
      "Bash(MIX_ENV=test mix run -e \"IO.inspect(Mix.env())\")",
      "Bash(MIX_ENV=test mix run -e \"IO.inspect(System.get_env(\\\"DATABASE_URL\\\"))\")",
      "Bash(MIX_ENV=test mix ecto.create)",
      "Bash(MIX_ENV=test iex -S mix -e \"Application.get_env(:eve_dmv, EveDmv.Repo)\" --exit)",
      "Bash(MIX_ENV=test mix run -e \"IO.inspect(Application.get_env(:eve_dmv, EveDmv.Repo))\")",
      "Bash(MIX_ENV=test mix run -e \"IO.inspect(EveDmv.Repo.config())\")",
      "Bash(MIX_ENV=test mix run -e \"IO.inspect(:ets.info(EveDmv.Repo.Pool))\")",
      "Bash(MIX_ENV=test DATABASE_URL=\"\" mix test --max-failures=3)",
      "Bash(rg:*)",
      "Bash(MIX_ENV=test DATABASE_URL=\"\" mix test test/eve_dmv/killmails/killmail_raw_test.exs:171 --max-failures=1)",
      "Bash(MIX_ENV=test DATABASE_URL=\"\" mix test --max-failures=5)",
      "Bash(MIX_ENV=test DATABASE_URL=\"\" mix test --max-failures=1)",
      "Bash(MIX_ENV=test mix test)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(grep:*)"
    ],
    "deny": []
  }
}