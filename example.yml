name: Deploy

on:
  # Manual deployment with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version tag (leave empty for latest)'
        required: false
        default: ''
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - rollback
          
  # Auto-deploy on successful CI to main
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [main]
    types: [completed]

env:
  DOCKER_IMAGE_NAME: guarzo/evecorptools

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    # Only run if CI passed or manual trigger
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          
      - name: Determine deployment parameters
        id: params
        run: |
          # Set environment (default to production for auto-deploy)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            ACTION="${{ github.event.inputs.action }}"
            VERSION="${{ github.event.inputs.version }}"
          else
            ENVIRONMENT="production"
            ACTION="deploy"
            VERSION=""
          fi
          
          # Generate version if not provided
          if [ -z "$VERSION" ]; then
            VERSION="v$(date +%Y%m%d%H%M%S)"
          fi
          
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "ACTION=$ACTION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          echo "üìã Deployment Parameters:"
          echo "  Environment: $ENVIRONMENT"
          echo "  Action: $ACTION"
          echo "  Version: $VERSION"
          
      - name: Create and push tag (deploy only)
        if: steps.params.outputs.ACTION == 'deploy'
        id: create_tag
        run: |
          VERSION="${{ steps.params.outputs.VERSION }}"
          
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          git tag -a "$VERSION" -m "Deploy to ${{ steps.params.outputs.ENVIRONMENT }}"
          git push origin "$VERSION"
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Set up Go (for build)
        if: steps.params.outputs.ACTION == 'deploy'
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          
      - name: Set up Node.js (for build)
        if: steps.params.outputs.ACTION == 'deploy'
        uses: actions/setup-node@v4
        with:
          node-version: '22.2.0'
          cache: 'npm'
          
      - name: Install dependencies (for build)
        if: steps.params.outputs.ACTION == 'deploy'
        run: |
          npm ci
          cd frontend && npm ci
          
      - name: Run tests (safety check)
        if: steps.params.outputs.ACTION == 'deploy'
        run: npm test
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          
      - name: Build and push Docker image
        if: steps.params.outputs.ACTION == 'deploy'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.params.outputs.VERSION }}
          build-args: |
            VERSION=${{ steps.params.outputs.VERSION }}
            
      - name: Extract host without port
        id: parse_host
        run: |
          # Remove port from SERVER_HOST if present
          HOST="${{ secrets.SERVER_HOST }}"
          # Extract just the hostname/IP, removing any :port suffix
          CLEAN_HOST=$(echo "$HOST" | cut -d':' -f1)
          echo "CLEAN_HOST=$CLEAN_HOST" >> $GITHUB_OUTPUT
          echo "üìã Using host: $CLEAN_HOST"
          
      - name: Debug SSH variables
        run: |
          echo "üîç SSH Connection Details:"
          echo "  Host: ${{ steps.parse_host.outputs.CLEAN_HOST }}"
          echo "  Username: ${{ secrets.SERVER_USER }}"
          echo "  SSH Key provided: ${{ secrets.SERVER_SSH_KEY != '' && 'Yes' || 'No' }}"
          echo "  Original SERVER_HOST: ${{ secrets.SERVER_HOST }}"
          
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ steps.parse_host.outputs.CLEAN_HOST }}
          port: 22
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            
            VERSION="${{ steps.params.outputs.VERSION }}"
            ACTION="${{ steps.params.outputs.ACTION }}"
            ENVIRONMENT="${{ steps.params.outputs.ENVIRONMENT }}"
            
            echo "üöÄ Performing $ACTION to $ENVIRONMENT with version $VERSION"
            
            # Navigate to the correct directory
            cd /app/wanderer
            
            # Update the .env-tools file with the new version
            if [ -f ".env-tools" ]; then
              cp .env-tools .env-tools.backup
              
              if grep -q "^EVECORPTOOLS_VERSION=" .env-tools; then
                sed -i "s/^EVECORPTOOLS_VERSION=.*/EVECORPTOOLS_VERSION=$VERSION/" .env-tools
              else
                echo "EVECORPTOOLS_VERSION=$VERSION" >> .env-tools
              fi
              
              echo "‚úÖ Updated EVECORPTOOLS_VERSION to $VERSION in .env-tools"
            else
              echo "‚ùå .env-tools file not found"
              exit 1
            fi
            
            # Run the compose manager to upgrade
            if [ "$ACTION" = "rollback" ]; then
              echo "üîÑ Rolling back to version $VERSION"
            fi
            
            echo "üöÄ Running compose-manager.sh upgrade evecorptools"
            ./compose-manager.sh upgrade evecorptools
            
            echo "‚úÖ Deployment completed successfully!"
            
      - name: Create GitHub Release
        if: steps.params.outputs.ACTION == 'deploy' && steps.params.outputs.ENVIRONMENT == 'production'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ steps.params.outputs.VERSION }}"
          release_name: "Release ${{ steps.params.outputs.VERSION }}"
          body: |
            ## üöÄ Deployment Information
            
            - **Environment:** ${{ steps.params.outputs.ENVIRONMENT }}
            - **Version:** ${{ steps.params.outputs.VERSION }}
            - **Deployed:** ${{ github.event.head_commit.message }}
            
            ### Changes
            See [commit history](https://github.com/${{ github.repository }}/commits/${{ steps.params.outputs.VERSION }})
          draft: false
          prerelease: ${{ steps.params.outputs.ENVIRONMENT == 'staging' }}
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Deployment to ${{ steps.params.outputs.ENVIRONMENT }} completed successfully!"
          else
            echo "‚ùå Deployment to ${{ steps.params.outputs.ENVIRONMENT }} failed!"
          fi