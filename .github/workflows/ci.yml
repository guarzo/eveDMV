name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  packages: write
  security-events: write
  actions: read

env:
  MIX_ENV: test
  ELIXIR_VERSION: "1.17.2"
  OTP_VERSION: "27.0"
  DOCKER_IMAGE_NAME: guarzo/evedmv

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      plt-cache-key: ${{ steps.plt-cache-key.outputs.key }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate cache keys
      id: cache-key
      run: |
        echo "key=${{ runner.os }}-mix-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}" >> $GITHUB_OUTPUT
        
    - name: Generate PLT cache key
      id: plt-cache-key
      run: |
        echo "key=${{ runner.os }}-plt-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('**/mix.lock') }}" >> $GITHUB_OUTPUT

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libbz2-dev bc erlang-dev

    - name: Install dependencies
      run: |
        mix local.hex --force
        mix local.rebar --force
        mix deps.get
        mix deps.compile

  # Run quality checks in parallel
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ needs.setup.outputs.cache-key }}
    - name: Check formatting
      run: mix format --check-formatted

  credo-check:
    name: Credo Analysis
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ needs.setup.outputs.cache-key }}
    - name: Run Credo
      run: mix credo --strict

  compile-check:
    name: Compile Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libbz2-dev bc erlang-dev
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ needs.setup.outputs.cache-key }}
    - name: Compile with warnings as errors
      run: mix compile --warnings-as-errors

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ needs.setup.outputs.cache-key }}
    - name: Security audit
      run: mix deps.audit

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: setup
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: eve_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libbz2-dev bc erlang-dev

    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ needs.setup.outputs.cache-key }}

    - name: Setup database
      run: |
        MIX_ENV=test mix ecto.create
        MIX_ENV=test mix ecto.migrate
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/eve_tracker_test

    - name: Run tests with coverage
      run: MIX_ENV=test mix coveralls.json
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/eve_tracker_test
        WANDERER_KILLS_SSE_URL: http://localhost:4004/api/v1/kills/stream
        WANDERER_KILLS_BASE_URL: http://localhost:4004
        EVE_SSO_CLIENT_ID: test_client_id
        EVE_SSO_CLIENT_SECRET: test_client_secret
        SECRET_KEY_BASE: test_secret_key_base_for_ci_testing_only_not_production
        PIPELINE_ENABLED: false
        MOCK_SSE_SERVER_ENABLED: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cover/excoveralls.json
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: cover/
        retention-days: 30

  # Dialyzer job - runs on all PRs and main branch
  dialyzer:
    name: Dialyzer Analysis
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libbz2-dev bc erlang-dev
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ needs.setup.outputs.cache-key }}
    - name: Cache PLT files
      uses: actions/cache@v4
      with:
        path: priv/plts
        key: ${{ needs.setup.outputs.plt-cache-key }}
        restore-keys: |
          ${{ runner.os }}-plt-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-
    - name: Run Dialyzer
      run: mix dialyzer

  coverage-comment:
    name: Coverage Comment
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage report
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: cover/

    - name: Coverage Comment
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: cover/lcov.info
        delete-old-comments: true
      continue-on-error: true

  # Docker build - runs on all PRs and main branch
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [format-check, credo-check, compile-check, security-audit, test, dialyzer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE_NAME }}:main'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true