services:
  db:
    image: postgres:17-alpine
    container_name: eve_dmv_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: eve_dmv_prod
      POSTGRES_HOST_AUTH_METHOD: trust
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c pg_stat_statements.max=10000
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: eve_dmv_redis
    command: ["redis-server", "--save", "900", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Init container for historical data import
  historical_import:
    image: your-registry/eve_dmv:latest
    container_name: eve_dmv_historical_import
    environment:
      - MIX_ENV=prod
      - DATABASE_URL=ecto://postgres:postgres@db/eve_dmv_prod
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env.prod
    volumes:
      # Mount host directory containing killmail archives
      - ./data/killmail_archives:/data/killmail_archives:ro
      # Mount persistent directory for import state
      - import_data:/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: /app/scripts/import_historical_killmails.sh
    restart: "no"  # Only run once

  app:
    image: your-registry/eve_dmv:latest
    container_name: eve_dmv_app
    environment:
      - MIX_ENV=prod
      - DATABASE_URL=ecto://postgres:postgres@db/eve_dmv_prod
      - REDIS_URL=redis://redis:6379
      - PHX_HOST=localhost
      - PHX_PORT=4010
    env_file:
      - .env.prod
    ports:
      - "4010:4010"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      historical_import:
        condition: service_completed_successfully
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  import_data:
    driver: local