<div class="surveillance-profiles min-h-screen bg-gray-900 text-gray-100 p-6">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-3xl font-bold text-gray-100">Surveillance Profiles</h1>
    <button
      phx-click="new_profile"
      class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium"
    >
      + New Profile
    </button>
  </div>

  <!-- Chain Status -->
  <div class="mb-6 p-4 rounded-lg border" class={
    if @chain_status.connected, do: "bg-green-900 border-green-700", else: "bg-red-900 border-red-700"
  }>
    <div class="flex items-center">
      <div class={
        "w-3 h-3 rounded-full mr-3 " <>
        if @chain_status.connected, do: "bg-green-400", else: "bg-red-400"
      }></div>
      <span class="font-medium text-gray-200">
        Chain Status: 
        <%= if @chain_status.connected do %>
          <span class="text-green-400">Connected to <%= @chain_status.map_slug %></span>
          <span class="text-gray-400">(<%= @chain_status.system_count %> systems)</span>
        <% else %>
          <span class="text-red-400">Disconnected from <%= @chain_status.map_slug %></span>
        <% end %>
      </span>
    </div>
  </div>

  <%= if @editing_profile do %>
    <!-- Profile Editor -->
    <div class="bg-gray-800 rounded-lg shadow-sm border border-gray-700 p-6 mb-6">
      <h2 class="text-xl font-semibold mb-4 text-gray-200">
        <%= if @editing_profile.id, do: "Edit Profile", else: "Create Profile" %>
      </h2>
      
      <form phx-submit="save_profile">
        <!-- Basic Profile Info -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Profile Name</label>
            <input
              type="text"
              name="profile[name]"
              value={@editing_profile.name}
              phx-blur="update_profile_field"
              phx-value-field="name"
              placeholder="e.g., High Value Targets"
              class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Status</label>
            <select
              name="profile[enabled]"
              class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="true" selected={@editing_profile.enabled}>Active</option>
              <option value="false" selected={!@editing_profile.enabled}>Inactive</option>
            </select>
          </div>
        </div>

        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-300 mb-1">Description (Optional)</label>
          <textarea
            name="profile[description]"
            phx-blur="update_profile_field"
            phx-value-field="description"
            rows="2"
            placeholder="Brief description of what this profile monitors..."
            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
          ><%= @editing_profile.description %></textarea>
        </div>

        <!-- Filter Builder -->
        <div class="mb-6">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-200">Filters</h3>
            <div class="flex items-center space-x-4">
              <!-- Logic Operator -->
              <div class="flex items-center space-x-2">
                <span class="text-sm text-gray-400">Logic:</span>
                <select
                  phx-change="update_logic_operator"
                  name="operator"
                  class="px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-gray-100"
                >
                  <option value="and" selected={@editing_profile.criteria.logic_operator == :and}>ALL (AND)</option>
                  <option value="or" selected={@editing_profile.criteria.logic_operator == :or}>ANY (OR)</option>
                </select>
              </div>
              
              <!-- Add Filter Dropdown -->
              <div class="relative">
                <select
                  phx-change="add_filter"
                  name="type"
                  class="px-3 py-1 bg-blue-700 border border-blue-600 rounded text-sm text-gray-100"
                >
                  <option value="">+ Add Filter</option>
                  <option value="character">Character</option>
                  <option value="corporation">Corporation</option>
                  <option value="alliance">Alliance</option>
                  <option value="system">System</option>
                  <option value="ship_type">Ship Type</option>
                  <option value="chain">Chain Awareness</option>
                  <option value="isk_value">ISK Value</option>
                  <option value="participant_count">Participant Count</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Filter List -->
          <div class="space-y-4">
            <%= for {condition, index} <- Enum.with_index(@editing_profile.criteria.conditions || []) do %>
              <div class="p-4 border border-gray-600 rounded-lg bg-gray-700">
                <div class="flex justify-between items-start mb-3">
                  <span class="text-sm font-medium text-gray-300 capitalize">
                    <%= format_filter_type(condition.type) %>
                  </span>
                  <button
                    type="button"
                    phx-click="remove_filter"
                    phx-value-index={index}
                    class="text-red-400 hover:text-red-300 text-sm"
                  >
                    Remove
                  </button>
                </div>
                
                <%= render_filter_inputs(condition, index) %>
              </div>
            <% end %>
            
            <%= if length(@editing_profile.criteria.conditions || []) == 0 do %>
              <div class="text-center py-8 text-gray-500">
                <p>No filters added yet. Use the "+ Add Filter" dropdown above to get started.</p>
              </div>
            <% end %>
          </div>
        </div>

        <!-- Preview Section -->
        <%= if length(@editing_profile.criteria.conditions || []) > 0 do %>
          <div class="mb-6 p-4 bg-gray-700 rounded-lg border border-gray-600">
            <h4 class="font-medium text-gray-200 mb-3">Preview</h4>
            
            <%= if @filter_preview.testing do %>
              <div class="flex items-center text-blue-400">
                <div class="animate-spin w-4 h-4 border-2 border-blue-400 border-t-transparent rounded-full mr-2"></div>
                Testing against last <%= @preview_killmail_limit %> killmails...
              </div>
            <% else %>
              <%= if Map.get(@filter_preview, :error) do %>
                <div class="text-red-400">
                  Error: <%= @filter_preview.error %>
                </div>
              <% else %>
                <div class="mb-3">
                  <span class="font-medium text-gray-200">
                    <%= @filter_preview.count %> matches found
                  </span>
                  <%= if Map.get(@filter_preview, :total_tested) do %>
                    <span class="text-sm text-gray-400">
                      (tested against <%= @filter_preview.total_tested %> killmails)
                    </span>
                  <% end %>
                </div>
                
                <%= if @filter_preview.count > 0 do %>
                  <div class="space-y-2">
                    <%= for match <- Enum.take(@filter_preview.matches, 5) do %>
                      <div class="text-sm bg-gray-800 p-2 rounded border border-gray-600">
                        <span class="font-medium text-gray-200"><%= match.victim_name %></span>
                        <span class="text-gray-400">lost a</span> <span class="text-blue-400"><%= match.victim_ship %></span>
                        <span class="text-green-400">(<%= format_isk(match.isk_value) %> ISK)</span>
                        <span class="text-gray-500 text-xs ml-2">
                          <%= format_timestamp(match.timestamp) %>
                        </span>
                      </div>
                    <% end %>
                    
                    <%= if @filter_preview.count > 5 do %>
                      <div class="text-sm text-gray-400">
                        + <%= @filter_preview.count - 5 %> more matches...
                      </div>
                    <% end %>
                  </div>
                <% else %>
                  <div class="text-gray-400 text-sm">
                    No matches found with current filters.
                  </div>
                <% end %>
              <% end %>
            <% end %>
          </div>
        <% end %>

        <!-- Form Actions -->
        <div class="flex justify-end space-x-3">
          <button
            type="button"
            phx-click="cancel_edit"
            class="px-4 py-2 border border-gray-600 rounded-md text-gray-300 hover:bg-gray-700"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            <%= if @editing_profile.id, do: "Update Profile", else: "Create Profile" %>
          </button>
        </div>
      </form>
    </div>
  <% else %>
    <!-- Profile List -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <%= for profile <- @profiles do %>
        <div class="bg-gray-800 rounded-lg shadow-sm border border-gray-700 p-6">
          <div class="flex justify-between items-start mb-3">
            <h3 class="font-semibold text-gray-200"><%= profile.name %></h3>
            <div class="flex items-center">
              <div class={
                "w-2 h-2 rounded-full mr-2 " <>
                if profile.enabled, do: "bg-green-400", else: "bg-gray-500"
              }></div>
              <span class={
                "text-xs font-medium " <>
                if profile.enabled, do: "text-green-400", else: "text-gray-500"
              }>
                <%= if profile.enabled, do: "Active", else: "Inactive" %>
              </span>
            </div>
          </div>
          
          <%= if profile.description && profile.description != "" do %>
            <p class="text-sm text-gray-400 mb-4"><%= profile.description %></p>
          <% end %>
          
          <div class="text-xs text-gray-500 mb-4">
            <%= format_filter_summary(profile.criteria) %>
          </div>
          
          <div class="flex justify-between items-center">
            <div class="flex space-x-2">
              <button
                phx-click="edit_profile"
                phx-value-id={profile.id}
                class="text-xs text-blue-400 hover:text-blue-300"
              >
                Edit
              </button>
              <button
                phx-click="toggle_profile"
                phx-value-id={profile.id}
                class="text-xs text-gray-400 hover:text-gray-300"
              >
                <%= if profile.enabled, do: "Disable", else: "Enable" %>
              </button>
              <button
                phx-click="delete_profile"
                phx-value-id={profile.id}
                class="text-xs text-red-400 hover:text-red-300"
                data-confirm="Are you sure you want to delete this profile?"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      <% end %>
      
      <%= if length(@profiles) == 0 do %>
        <div class="col-span-full text-center py-12">
          <div class="text-gray-400 mb-4">
            <svg class="w-12 h-12 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
            </svg>
            <p class="text-lg font-medium text-gray-300">No surveillance profiles yet</p>
            <p class="text-sm text-gray-500">Create your first profile to start monitoring for specific events</p>
          </div>
          <button
            phx-click="new_profile"
            class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium"
          >
            Create Your First Profile
          </button>
        </div>
      <% end %>
    </div>
  <% end %>
</div>

<script>
// Global autocomplete event handlers
window.addEventListener("phx:show_autocomplete", (e) => {
  console.log('🔍 show_autocomplete event received:', e.detail);
  const { input_id, suggestions } = e.detail;
  const suggestionsContainer = document.getElementById(`${input_id}_suggestions`);
  
  console.log('📦 Suggestions container found:', suggestionsContainer);
  console.log('📝 Number of suggestions:', suggestions.length);
  
  if (suggestions.length > 0) {
    const html = suggestions.map(suggestion => 
      `<div class="px-3 py-2 hover:bg-gray-600 cursor-pointer text-gray-200 text-sm suggestion-item" 
           data-id="${suggestion.id}"
           data-name="${suggestion.name}">
         ${suggestion.name} (${suggestion.id})
       </div>`
    ).join('');
    
    console.log('🎨 Generated HTML:', html);
    suggestionsContainer.innerHTML = html;
    suggestionsContainer.classList.remove('hidden');
    
    console.log('✅ Suggestions displayed, checking suggestion items:');
    const items = suggestionsContainer.querySelectorAll('.suggestion-item');
    console.log('🎯 Found suggestion items:', items.length);
    items.forEach((item, index) => {
      console.log(`  Item ${index}:`, {
        id: item.dataset.id,
        name: item.dataset.name,
        text: item.textContent,
        classes: item.className
      });
    });
  } else {
    console.log('❌ No suggestions, hiding container');
    suggestionsContainer.classList.add('hidden');
  }
});

window.addEventListener("phx:hide_autocomplete", (e) => {
  console.log('🙈 hide_autocomplete event received');
  document.querySelectorAll('[id$="_suggestions"]').forEach(el => {
    console.log('🙈 Hiding suggestions container:', el.id);
    el.classList.add('hidden');
  });
});

// Add global click listener to debug clicks anywhere
document.addEventListener('click', (e) => {
  console.log('🖱️ GLOBAL CLICK detected on:', e.target);
  
  if (e.target.closest('[id$="_suggestions"]')) {
    console.log('🖱️ GLOBAL CLICK on suggestions area detected!');
    console.log('🎯 Click target:', e.target);
    console.log('🏷️ Target classes:', e.target.className);
    console.log('📍 Target tagName:', e.target.tagName);
    console.log('🔍 Closest suggestion-item:', e.target.closest('.suggestion-item'));
    
    const suggestionItem = e.target.closest('.suggestion-item');
    if (suggestionItem) {
      console.log('✅ Found suggestion item data:', {
        id: suggestionItem.dataset.id,
        name: suggestionItem.dataset.name
      });
      
      // Prevent default to stop any interference
      e.preventDefault();
      e.stopPropagation();
      
      // Find the hook and trigger the selection manually
      const hookContainer = suggestionItem.closest('[phx-hook="AutocompleteInput"]');
      if (hookContainer && window.liveSocket) {
        console.log('🔧 Found hook container, triggering manual selection');
        const hooks = window.liveSocket.getHookCallbacks(hookContainer.id);
        console.log('🔧 Available hooks:', hooks);
      }
    }
  }
});

// Add mutation observer to detect when suggestions are removed
const observeContainer = (containerId) => {
  const container = document.getElementById(containerId);
  if (container && !container._observed) {
    container._observed = true;
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          console.log('🔄 Suggestions container content changed:', {
            added: mutation.addedNodes.length,
            removed: mutation.removedNodes.length,
            target: mutation.target.id
          });
        }
      });
    });
    
    observer.observe(container, { 
      childList: true, 
      subtree: true 
    });
    console.log('👀 Started observing container:', containerId);
  }
};

// Start observing when autocomplete is shown
const originalShowHandler = window.addEventListener;
setTimeout(() => {
  const containers = document.querySelectorAll('[id$="_suggestions"]');
  containers.forEach(container => {
    observeContainer(container.id);
  });
}, 1000);
</script>