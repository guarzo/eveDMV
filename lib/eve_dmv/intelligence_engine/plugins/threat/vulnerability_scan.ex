defmodule EveDmv.IntelligenceEngine.Plugins.Threat.VulnerabilityScan do
  @moduledoc """
  Threat vulnerability scanning plugin.

  Scans entities (characters, corporations, fleets) for potential vulnerabilities
  including behavioral patterns, tactical weaknesses, security gaps, and
  exploitable characteristics that could be leveraged in threat scenarios.
  """

  use EveDmv.IntelligenceEngine.Plugin

  @impl true
  def analyze(entity_id, base_data, opts) when is_integer(entity_id) do
    start_time = System.monotonic_time()

    try do
      entity_type = Keyword.get(opts, :entity_type, :character)

      with {:ok, entity_data} <- get_entity_data(base_data, entity_id, entity_type),
           {:ok, related_data} <- get_related_data(base_data, entity_id, entity_type) do
        vulnerability_analysis = %{
          entity_profile: analyze_entity_profile(entity_data, entity_type),
          behavioral_vulnerabilities:
            analyze_behavioral_vulnerabilities(entity_data, related_data),
          tactical_vulnerabilities: analyze_tactical_vulnerabilities(entity_data, related_data),
          operational_vulnerabilities:
            analyze_operational_vulnerabilities(entity_data, related_data),
          social_vulnerabilities: analyze_social_vulnerabilities(entity_data, related_data),
          security_assessment: perform_security_assessment(entity_data, related_data),
          exploitability_rating: calculate_exploitability_rating(entity_data, related_data),
          vulnerability_summary:
            generate_vulnerability_summary(entity_data, related_data, entity_type)
        }

        duration_ms =
          System.convert_time_unit(System.monotonic_time() - start_time, :native, :millisecond)

        log_plugin_execution(entity_id, duration_ms, {:ok, vulnerability_analysis})

        {:ok, vulnerability_analysis}
      else
        {:error, _reason} = error ->
          duration_ms =
            System.convert_time_unit(System.monotonic_time() - start_time, :native, :millisecond)

          log_plugin_execution(entity_id, duration_ms, error)
          error
      end
    rescue
      exception ->
        handle_plugin_exception(exception, entity_id)
    end
  end

  # Batch analysis support
  @impl true
  def analyze(entity_ids, base_data, opts) when is_list(entity_ids) do
    if supports_batch?() do
      entity_ids
      |> Enum.map(fn entity_id ->
        Task.async(fn -> {entity_id, analyze(entity_id, base_data, opts)} end)
      end)
      |> Enum.map(&Task.await(&1, 30_000))
      |> merge_batch_results()
      |> then(&{:ok, &1})
    else
      {:error, :batch_not_supported}
    end
  end

  @impl true
  def plugin_info do
    %{
      name: "Vulnerability Scanner",
      description: "Scans entities for behavioral, tactical, and operational vulnerabilities",
      version: "2.0.0",
      dependencies: [:eve_database],
      tags: [:threat, :vulnerability, :security, :assessment],
      author: "EVE DMV Intelligence Team"
    }
  end

  @impl true
  def supports_batch?, do: true

  @impl true
  def dependencies, do: [EveDmv.Database.CharacterRepository, EveDmv.Database.KillmailRepository]

  @impl true
  def cache_strategy do
    %{
      strategy: :default,
      # 5 minutes for vulnerability scans
      ttl_seconds: 300,
      cache_key_prefix: "vulnerability_scan"
    }
  end

  # Analysis implementation

  defp analyze_entity_profile(entity_data, entity_type) do
    case entity_type do
      :character ->
        %{
          entity_type: :character,
          character_id: entity_data.character_id,
          character_name: entity_data.character_name,
          corporation_id: entity_data.corporation_id,
          alliance_id: entity_data.alliance_id,
          security_status: entity_data.security_status || 0.0,
          age_days: calculate_character_age(entity_data),
          activity_level: categorize_activity_level(entity_data),
          primary_timezone: entity_data.prime_timezone
        }

      :corporation ->
        %{
          entity_type: :corporation,
          corporation_id: entity_data.corporation_id,
          corporation_name: entity_data.corporation_name,
          alliance_id: entity_data.alliance_id,
          member_count: entity_data.member_count || 0,
          founded_date: entity_data.founded_date,
          ceo_id: entity_data.ceo_id,
          activity_level: categorize_corp_activity_level(entity_data)
        }

      :fleet ->
        %{
          entity_type: :fleet,
          fleet_id: entity_data.fleet_id,
          fleet_name: entity_data.fleet_name,
          participant_count: entity_data.participant_count || 0,
          fleet_commander: entity_data.fleet_commander,
          fleet_type: entity_data.fleet_type,
          engagement_context: entity_data.engagement_context
        }
    end
  end

  defp analyze_behavioral_vulnerabilities(entity_data, related_data) do
    # Analyze behavioral patterns that could be exploited

    behavioral_patterns = extract_behavioral_patterns(entity_data, related_data)

    vulnerabilities = %{
      predictable_patterns: identify_predictable_patterns(behavioral_patterns),
      routine_weaknesses: identify_routine_weaknesses(behavioral_patterns),
      emotional_triggers: identify_emotional_triggers(entity_data),
      decision_making_flaws: analyze_decision_patterns(related_data),
      social_engineering_susceptibility: assess_social_engineering_risk(entity_data),
      information_disclosure_risk: assess_information_leakage(entity_data, related_data)
    }

    # Calculate behavioral vulnerability score
    behavioral_score = calculate_behavioral_vulnerability_score(vulnerabilities)

    %{
      vulnerabilities: vulnerabilities,
      behavioral_vulnerability_score: behavioral_score,
      exploitation_vectors: identify_behavioral_exploitation_vectors(vulnerabilities),
      mitigation_recommendations: suggest_behavioral_mitigations(vulnerabilities)
    }
  end

  defp analyze_tactical_vulnerabilities(entity_data, related_data) do
    # Analyze tactical and combat-related vulnerabilities

    tactical_analysis = %{
      combat_patterns: analyze_combat_vulnerability_patterns(entity_data, related_data),
      ship_preferences: analyze_ship_vulnerability_patterns(entity_data),
      fitting_weaknesses: identify_fitting_vulnerabilities(entity_data),
      engagement_preferences: analyze_engagement_vulnerabilities(entity_data),
      fleet_coordination: assess_coordination_vulnerabilities(entity_data, related_data),
      escape_patterns: analyze_escape_route_vulnerabilities(entity_data)
    }

    # Identify specific tactical exploits
    tactical_exploits = %{
      ship_counters: identify_ship_counter_opportunities(entity_data),
      range_exploits: identify_range_exploitation_opportunities(entity_data),
      timing_exploits: identify_timing_vulnerabilities(entity_data),
      positioning_weaknesses: identify_positioning_vulnerabilities(entity_data)
    }

    tactical_score = calculate_tactical_vulnerability_score(tactical_analysis, tactical_exploits)

    %{
      tactical_analysis: tactical_analysis,
      exploitation_opportunities: tactical_exploits,
      tactical_vulnerability_score: tactical_score,
      recommended_counter_strategies: suggest_counter_strategies(tactical_analysis),
      vulnerability_rating: categorize_tactical_vulnerability(tactical_score)
    }
  end

  defp analyze_operational_vulnerabilities(entity_data, related_data) do
    # Analyze operational security and procedural vulnerabilities

    operational_gaps = %{
      security_practices: assess_security_practices(entity_data),
      information_security: assess_information_security(entity_data, related_data),
      operational_patterns: identify_operational_patterns(entity_data, related_data),
      asset_exposure: assess_asset_exposure_risk(entity_data),
      communication_security: assess_communication_vulnerabilities(entity_data),
      logistical_vulnerabilities: identify_logistical_weaknesses(entity_data)
    }

    # Calculate operational risk factors
    risk_factors = %{
      insider_threat_risk: assess_insider_threat_risk(entity_data),
      supply_chain_vulnerabilities: assess_supply_chain_risks(entity_data),
      operational_tempo_risks: assess_operational_tempo_vulnerabilities(entity_data),
      geographic_vulnerabilities: assess_geographic_vulnerabilities(entity_data)
    }

    operational_score = calculate_operational_vulnerability_score(operational_gaps, risk_factors)

    %{
      operational_gaps: operational_gaps,
      risk_factors: risk_factors,
      operational_vulnerability_score: operational_score,
      critical_exposures: identify_critical_operational_exposures(operational_gaps),
      security_recommendations: generate_operational_security_recommendations(operational_gaps)
    }
  end

  defp analyze_social_vulnerabilities(entity_data, related_data) do
    # Analyze social and organizational vulnerabilities

    social_analysis = %{
      relationship_mapping: analyze_relationship_vulnerabilities(entity_data, related_data),
      influence_networks: map_influence_vulnerabilities(entity_data, related_data),
      trust_relationships: assess_trust_relationship_risks(entity_data),
      communication_patterns: analyze_communication_patterns(entity_data),
      leadership_dependencies: identify_leadership_vulnerabilities(entity_data),
      group_dynamics: assess_group_dynamic_vulnerabilities(entity_data, related_data)
    }

    # Social engineering vectors
    social_vectors = %{
      manipulation_susceptibility: assess_manipulation_susceptibility(entity_data),
      authority_exploitation: assess_authority_exploitation_risk(entity_data),
      peer_pressure_vulnerabilities: assess_peer_pressure_risks(entity_data),
      loyalty_exploitation: assess_loyalty_exploitation_risks(entity_data)
    }

    social_score = calculate_social_vulnerability_score(social_analysis, social_vectors)

    %{
      social_analysis: social_analysis,
      exploitation_vectors: social_vectors,
      social_vulnerability_score: social_score,
      key_relationships: identify_key_vulnerable_relationships(social_analysis),
      social_engineering_recommendations: suggest_social_engineering_defenses(social_analysis)
    }
  end

  defp perform_security_assessment(entity_data, related_data) do
    # Comprehensive security posture assessment

    security_metrics = %{
      information_security_score: assess_information_security_score(entity_data, related_data),
      operational_security_score: assess_operational_security_score(entity_data),
      communication_security_score: assess_communication_security_score(entity_data),
      physical_security_score: assess_physical_security_score(entity_data),
      personnel_security_score: assess_personnel_security_score(entity_data)
    }

    # Identify security gaps
    security_gaps = identify_security_gaps(security_metrics, entity_data, related_data)

    # Calculate overall security posture
    overall_security_score = calculate_overall_security_score(security_metrics)
    security_rating = categorize_security_rating(overall_security_score)

    %{
      security_metrics: security_metrics,
      identified_gaps: security_gaps,
      overall_security_score: overall_security_score,
      security_rating: security_rating,
      priority_improvements: identify_priority_security_improvements(security_gaps),
      security_recommendations: generate_comprehensive_security_recommendations(security_gaps)
    }
  end

  defp calculate_exploitability_rating(entity_data, related_data) do
    # Calculate overall exploitability rating across all dimensions

    # Weight different vulnerability types
    weights = %{
      behavioral: 0.25,
      tactical: 0.30,
      operational: 0.25,
      social: 0.20
    }

    # Get individual scores (these would be calculated by previous functions)
    # Placeholder
    behavioral_score = 65.0
    # Placeholder
    tactical_score = 70.0
    # Placeholder
    operational_score = 55.0
    # Placeholder
    social_score = 60.0

    # Calculate weighted overall score
    overall_score =
      behavioral_score * weights.behavioral +
        tactical_score * weights.tactical +
        operational_score * weights.operational +
        social_score * weights.social

    # Determine exploitability rating
    exploitability_rating = categorize_exploitability_rating(overall_score)

    # Identify primary attack vectors
    primary_vectors =
      identify_primary_attack_vectors(
        behavioral_score,
        tactical_score,
        operational_score,
        social_score
      )

    %{
      overall_exploitability_score: overall_score,
      exploitability_rating: exploitability_rating,
      primary_attack_vectors: primary_vectors,
      vulnerability_breakdown: %{
        behavioral: behavioral_score,
        tactical: tactical_score,
        operational: operational_score,
        social: social_score
      },
      exploitation_difficulty: assess_exploitation_difficulty(overall_score),
      exploitation_impact_potential: assess_exploitation_impact(entity_data, related_data)
    }
  end

  defp generate_vulnerability_summary(entity_data, related_data, entity_type) do
    # Generate executive summary of vulnerability assessment

    # Key findings
    key_vulnerabilities = identify_key_vulnerabilities(entity_data, related_data)
    critical_risks = identify_critical_risks(entity_data, related_data)

    # Risk prioritization
    risk_priority = prioritize_vulnerability_risks(key_vulnerabilities, critical_risks)

    # Mitigation roadmap
    mitigation_roadmap = create_mitigation_roadmap(risk_priority)

    %{
      entity_type: entity_type,
      assessment_timestamp: DateTime.utc_now(),
      overall_vulnerability_level:
        determine_overall_vulnerability_level(entity_data, related_data),
      key_vulnerabilities: key_vulnerabilities,
      critical_risks: critical_risks,
      risk_prioritization: risk_priority,
      immediate_actions_required: identify_immediate_actions(critical_risks),
      mitigation_roadmap: mitigation_roadmap,
      reassessment_recommendation: recommend_reassessment_schedule(risk_priority),
      executive_summary: create_executive_summary(key_vulnerabilities, critical_risks)
    }
  end

  # Helper functions

  defp get_entity_data(base_data, entity_id, entity_type) do
    data_key =
      case entity_type do
        :character -> :character_stats
        :corporation -> :corporation_data
        :fleet -> :fleet_data
      end

    case get_in(base_data, [data_key, entity_id]) do
      nil -> {:error, :entity_not_found}
      entity_data -> {:ok, entity_data}
    end
  end

  defp get_related_data(base_data, entity_id, entity_type) do
    # Get related data based on entity type
    related_data =
      case entity_type do
        :character ->
          %{
            killmail_stats: get_in(base_data, [:killmail_stats, entity_id]) || %{},
            corp_data: get_related_corp_data(base_data, entity_id),
            alliance_data: get_related_alliance_data(base_data, entity_id)
          }

        :corporation ->
          %{
            member_stats: get_in(base_data, [:member_statistics, entity_id]) || [],
            alliance_data: get_related_alliance_data(base_data, entity_id),
            corp_activity: get_in(base_data, [:corp_activity, entity_id]) || %{}
          }

        :fleet ->
          %{
            participants: get_in(base_data, [:fleet_participants, entity_id]) || [],
            engagement_data: get_in(base_data, [:engagement_data, entity_id]) || %{}
          }
      end

    {:ok, related_data}
  end

  defp get_related_corp_data(_base_data, _entity_id) do
    # Placeholder for corporation data retrieval
    %{}
  end

  defp get_related_alliance_data(_base_data, _entity_id) do
    # Placeholder for alliance data retrieval
    %{}
  end

  defp calculate_character_age(entity_data) do
    case entity_data.creation_date do
      nil ->
        0

      creation_date ->
        case DateTime.from_iso8601(creation_date) do
          {:ok, datetime, _} ->
            DateTime.diff(DateTime.utc_now(), datetime, :day)

          _ ->
            0
        end
    end
  end

  defp categorize_activity_level(entity_data) do
    recent_activity = (entity_data.recent_kills || 0) + (entity_data.recent_losses || 0)

    cond do
      recent_activity > 50 -> :very_high
      recent_activity > 20 -> :high
      recent_activity > 10 -> :moderate
      recent_activity > 5 -> :low
      true -> :minimal
    end
  end

  defp categorize_corp_activity_level(entity_data) do
    member_count = entity_data.member_count || 0

    cond do
      member_count > 500 -> :very_high
      member_count > 100 -> :high
      member_count > 50 -> :moderate
      member_count > 10 -> :low
      true -> :minimal
    end
  end

  # Placeholder implementations for complex analysis functions
  defp extract_behavioral_patterns(_entity_data, _related_data), do: %{}

  defp identify_predictable_patterns(_patterns),
    do: ["Timezone consistency", "Ship preference patterns"]

  defp identify_routine_weaknesses(_patterns), do: ["Predictable login times", "Regular routes"]
  defp identify_emotional_triggers(_entity_data), do: ["Loss aversion", "Revenge seeking"]

  defp analyze_decision_patterns(_related_data),
    do: %{impulsiveness: :moderate, risk_tolerance: :high}

  defp assess_social_engineering_risk(_entity_data), do: :moderate

  defp assess_information_leakage(_entity_data, _related_data),
    do: %{risk_level: :low, sources: ["Public killboards"]}

  defp calculate_behavioral_vulnerability_score(_vulnerabilities), do: 65.0

  defp identify_behavioral_exploitation_vectors(_vulnerabilities),
    do: ["Pattern exploitation", "Social manipulation"]

  defp suggest_behavioral_mitigations(_vulnerabilities), do: ["Vary routines", "Improve OPSEC"]

  defp analyze_combat_vulnerability_patterns(_entity_data, _related_data),
    do: %{predictability: :high}

  defp analyze_ship_vulnerability_patterns(_entity_data),
    do: %{ship_preferences: ["Cruisers"], weakness: "Limited range"}

  defp identify_fitting_vulnerabilities(_entity_data),
    do: ["Weak tank", "Poor damage application"]

  defp analyze_engagement_vulnerabilities(_entity_data),
    do: %{range_preference: :close, escape_tendency: :low}

  defp assess_coordination_vulnerabilities(_entity_data, _related_data),
    do: %{coordination_level: :poor}

  defp analyze_escape_route_vulnerabilities(_entity_data), do: %{escape_success_rate: 0.3}

  defp identify_ship_counter_opportunities(_entity_data),
    do: ["Use long-range ships", "Bring EWAR"]

  defp identify_range_exploitation_opportunities(_entity_data),
    do: ["Kite at range", "Force close range"]

  defp identify_timing_vulnerabilities(_entity_data),
    do: ["Slow to react", "Poor situational awareness"]

  defp identify_positioning_vulnerabilities(_entity_data),
    do: ["Poor gate control", "Overextension tendency"]

  defp calculate_tactical_vulnerability_score(_analysis, _exploits), do: 70.0

  defp suggest_counter_strategies(_analysis),
    do: ["Use ship counters", "Exploit range preferences"]

  defp categorize_tactical_vulnerability(score) when score > 70, do: :high
  defp categorize_tactical_vulnerability(score) when score > 40, do: :moderate
  defp categorize_tactical_vulnerability(_), do: :low

  # Additional placeholder implementations
  defp assess_security_practices(_entity_data), do: %{opsec_level: :poor, awareness: :low}

  defp assess_information_security(_entity_data, _related_data),
    do: %{information_leakage: :moderate}

  defp identify_operational_patterns(_entity_data, _related_data), do: %{routine_level: :high}
  defp assess_asset_exposure_risk(_entity_data), do: %{exposure_level: :moderate}
  defp assess_communication_vulnerabilities(_entity_data), do: %{communication_security: :weak}

  defp identify_logistical_weaknesses(_entity_data),
    do: ["Predictable supply routes", "Poor asset distribution"]

  defp assess_insider_threat_risk(_entity_data), do: :moderate
  defp assess_supply_chain_risks(_entity_data), do: :low
  defp assess_operational_tempo_vulnerabilities(_entity_data), do: :moderate
  defp assess_geographic_vulnerabilities(_entity_data), do: %{home_system_dependence: :high}
  defp calculate_operational_vulnerability_score(_gaps, _factors), do: 55.0
  defp identify_critical_operational_exposures(_gaps), do: ["Poor OPSEC", "Asset concentration"]

  defp generate_operational_security_recommendations(_gaps),
    do: ["Improve OPSEC", "Distribute assets"]

  defp analyze_relationship_vulnerabilities(_entity_data, _related_data),
    do: %{trust_network: :weak}

  defp map_influence_vulnerabilities(_entity_data, _related_data), do: %{influence_points: []}
  defp assess_trust_relationship_risks(_entity_data), do: %{betrayal_risk: :moderate}

  defp identify_leadership_vulnerabilities(_entity_data),
    do: ["Single point of failure", "Poor succession planning"]

  defp assess_group_dynamic_vulnerabilities(_entity_data, _related_data), do: %{cohesion: :weak}
  defp analyze_communication_patterns(_entity_data), do: %{security_level: :weak, patterns: []}
  defp assess_manipulation_susceptibility(_entity_data), do: :moderate
  defp assess_authority_exploitation_risk(_entity_data), do: :high
  defp assess_peer_pressure_risks(_entity_data), do: :moderate
  defp assess_loyalty_exploitation_risks(_entity_data), do: :high
  defp calculate_social_vulnerability_score(_analysis, _vectors), do: 60.0
  defp identify_key_vulnerable_relationships(_analysis), do: ["CEO dependency", "FC reliance"]

  defp suggest_social_engineering_defenses(_analysis),
    do: ["Verify requests", "Limit information sharing"]

  defp assess_information_security_score(_entity_data, _related_data), do: 40.0
  defp assess_operational_security_score(_entity_data), do: 50.0
  defp assess_communication_security_score(_entity_data), do: 45.0
  defp assess_physical_security_score(_entity_data), do: 60.0
  defp assess_personnel_security_score(_entity_data), do: 55.0

  defp identify_security_gaps(_metrics, _entity_data, _related_data),
    do: ["Poor OPSEC", "Weak communications"]

  defp calculate_overall_security_score(metrics),
    do:
      (metrics.information_security_score + metrics.operational_security_score +
         metrics.communication_security_score + metrics.physical_security_score +
         metrics.personnel_security_score) / 5

  defp categorize_security_rating(score) when score > 80, do: :excellent
  defp categorize_security_rating(score) when score > 60, do: :good
  defp categorize_security_rating(score) when score > 40, do: :fair
  defp categorize_security_rating(_), do: :poor

  defp identify_priority_security_improvements(_gaps),
    do: ["Improve OPSEC training", "Secure communications"]

  defp generate_comprehensive_security_recommendations(_gaps),
    do: ["Implement security protocols", "Regular security training"]

  defp categorize_exploitability_rating(score) when score > 70, do: :highly_exploitable
  defp categorize_exploitability_rating(score) when score > 50, do: :moderately_exploitable
  defp categorize_exploitability_rating(score) when score > 30, do: :low_exploitability
  defp categorize_exploitability_rating(_), do: :minimal_exploitability

  defp identify_primary_attack_vectors(_behavioral, _tactical, _operational, _social),
    do: ["Social engineering", "Tactical exploitation"]

  defp assess_exploitation_difficulty(score) when score > 70, do: :easy
  defp assess_exploitation_difficulty(score) when score > 50, do: :moderate
  defp assess_exploitation_difficulty(_), do: :difficult
  defp assess_exploitation_impact(_entity_data, _related_data), do: :high

  defp identify_key_vulnerabilities(_entity_data, _related_data),
    do: ["Poor OPSEC", "Predictable patterns", "Weak social defenses"]

  defp identify_critical_risks(_entity_data, _related_data),
    do: ["Asset loss", "Information compromise", "Social engineering"]

  defp prioritize_vulnerability_risks(_key_vulnerabilities, _critical_risks),
    do: %{
      high: ["Poor OPSEC"],
      medium: ["Predictable patterns"],
      low: ["Minor information leaks"]
    }

  defp create_mitigation_roadmap(_risk_priority),
    do: %{
      immediate: ["OPSEC training"],
      short_term: ["Vary routines"],
      long_term: ["Security culture"]
    }

  defp determine_overall_vulnerability_level(_entity_data, _related_data), do: :moderate

  defp identify_immediate_actions(_critical_risks),
    do: ["Stop information sharing", "Vary routines", "Improve OPSEC"]

  defp recommend_reassessment_schedule(_risk_priority), do: :monthly

  defp create_executive_summary(_key_vulnerabilities, _critical_risks),
    do:
      "Entity shows moderate vulnerability to social engineering and tactical exploitation. Immediate OPSEC improvements recommended."
end
