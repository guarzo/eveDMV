defmodule EveDmv.Repo.Migrations.CreateAshResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :eve_character_id, :bigint, null: false
      add :eve_character_name, :text, null: false
      add :eve_corporation_id, :bigint
      add :eve_corporation_name, :text
      add :eve_alliance_id, :bigint
      add :eve_alliance_name, :text
      add :access_token, :text
      add :refresh_token, :text
      add :token_expires_at, :utc_datetime
      add :scopes, {:array, :text}, default: []
      add :last_login_at, :utc_datetime

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:users, [:eve_character_id], name: "users_unique_eve_character_index")

    create table(:tokens, primary_key: false) do
      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:participants, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :killmail_id, :bigint, null: false
      add :killmail_time, :utc_datetime, null: false
      add :character_id, :bigint
      add :character_name, :text
      add :corporation_id, :bigint
      add :corporation_name, :text
      add :alliance_id, :bigint
      add :alliance_name, :text
      add :faction_id, :bigint
      add :faction_name, :text
      add :ship_type_id, :bigint, null: false
      add :ship_name, :text
      add :weapon_type_id, :bigint
      add :weapon_name, :text
      add :damage_done, :bigint, null: false, default: 0
      add :security_status, :decimal, precision: 5, scale: 2
      add :is_victim, :boolean, null: false, default: false
      add :final_blow, :boolean, null: false, default: false
      add :is_npc, :boolean, null: false, default: false
      add :solar_system_id, :bigint, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:participants, [:killmail_time], name: "participants_time_idx")

    create index(:participants, [:final_blow], name: "participants_final_blow_idx")

    create index(:participants, [:is_victim], name: "participants_victim_idx")

    create index(:participants, [:ship_type_id], name: "participants_ship_type_idx")

    create index(:participants, [:alliance_id], name: "participants_alliance_idx")

    create index(:participants, [:corporation_id], name: "participants_corporation_idx")

    create index(:participants, [:character_id], name: "participants_character_idx")

    create index(:participants, [:killmail_id, :killmail_time], name: "participants_killmail_idx")

    create table(:killmails_raw, primary_key: false) do
      add :killmail_id, :bigint, null: false, primary_key: true
      add :killmail_time, :utc_datetime, null: false, primary_key: true
      add :killmail_hash, :text, null: false
      add :solar_system_id, :bigint, null: false
      add :victim_character_id, :bigint
      add :victim_corporation_id, :bigint
      add :victim_alliance_id, :bigint
      add :victim_ship_type_id, :bigint, null: false
      add :attacker_count, :bigint, null: false, default: 0
      add :raw_data, :map, null: false
      add :source, :text, null: false, default: "wanderer-kills"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:killmails_raw, [:killmail_hash, :killmail_time],
             name: "killmails_raw_unique_hash_time_index"
           )

    create unique_index(:killmails_raw, [:killmail_id, :killmail_time],
             name: "killmails_raw_unique_killmail_index"
           )

    create table(:killmails_enriched, primary_key: false) do
      add :killmail_id, :bigint, null: false, primary_key: true
      add :killmail_time, :utc_datetime, null: false, primary_key: true
      add :victim_character_id, :bigint
      add :victim_character_name, :text
      add :victim_corporation_id, :bigint
      add :victim_corporation_name, :text
      add :victim_alliance_id, :bigint
      add :victim_alliance_name, :text
      add :solar_system_id, :bigint, null: false
      add :solar_system_name, :text
      add :victim_ship_type_id, :bigint, null: false
      add :victim_ship_name, :text
      add :total_value, :decimal, precision: 15, scale: 2
      add :ship_value, :decimal, precision: 15, scale: 2
      add :fitted_value, :decimal, precision: 15, scale: 2
      add :attacker_count, :bigint, null: false, default: 0
      add :final_blow_character_id, :bigint
      add :final_blow_character_name, :text
      add :kill_category, :text
      add :victim_ship_category, :text
      add :module_tags, {:array, :text}, default: []
      add :noteworthy_modules, {:array, :text}, default: []
      add :enriched_at, :utc_datetime
      add :price_data_source, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:killmails_enriched, [:total_value], name: "killmails_enriched_value_idx")

    create index(:killmails_enriched, [:solar_system_id], name: "killmails_enriched_system_idx")

    create index(:killmails_enriched, [:victim_alliance_id],
             name: "killmails_enriched_victim_alliance_idx"
           )

    create index(:killmails_enriched, [:victim_corporation_id],
             name: "killmails_enriched_victim_corp_idx"
           )

    create index(:killmails_enriched, [:victim_character_id],
             name: "killmails_enriched_victim_character_idx"
           )

    create index(:killmails_enriched, [:killmail_time], name: "killmails_enriched_time_idx")

    create table(:eve_item_types, primary_key: false) do
      add :type_id, :bigint, null: false, primary_key: true
    end

    alter table(:participants) do
      modify :ship_type_id,
             references(:eve_item_types,
               column: :type_id,
               name: "participants_ship_type_id_fkey",
               type: :bigint,
               prefix: "public"
             )

      modify :weapon_type_id,
             references(:eve_item_types,
               column: :type_id,
               name: "participants_weapon_type_id_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    create unique_index(
             :participants,
             [:killmail_id, :killmail_time, :character_id, :ship_type_id],
             name: "participants_unique_participant_per_killmail_index"
           )

    alter table(:eve_item_types) do
      add :type_name, :text, null: false
      add :description, :text
      add :group_id, :bigint
      add :group_name, :text
      add :category_id, :bigint
      add :category_name, :text
      add :market_group_id, :bigint
      add :market_group_name, :text
      add :mass, :decimal, precision: 15, scale: 4
      add :volume, :decimal, precision: 15, scale: 4
      add :capacity, :decimal, precision: 15, scale: 4
      add :base_price, :decimal, precision: 15, scale: 2
      add :meta_level, :bigint
      add :tech_level, :bigint
      add :published, :boolean, null: false, default: true
      add :is_ship, :boolean, null: false, default: false
      add :is_module, :boolean, null: false, default: false
      add :is_charge, :boolean, null: false, default: false
      add :is_blueprint, :boolean, null: false, default: false
      add :is_deployable, :boolean, null: false, default: false
      add :search_keywords, {:array, :text}, default: []
      add :sde_version, :text
      add :last_updated, :utc_datetime

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:eve_item_types, [:is_module], name: "eve_item_types_module_idx")

    create index(:eve_item_types, [:is_ship], name: "eve_item_types_ship_idx")

    create index(:eve_item_types, [:published], name: "eve_item_types_published_idx")

    create index(:eve_item_types, ["type_name gin_trgm_ops"],
             name: "eve_item_types_name_trgm_idx",
             using: "gin"
           )

    create index(:eve_item_types, [:market_group_id], name: "eve_item_types_market_group_idx")

    create index(:eve_item_types, [:category_id], name: "eve_item_types_category_idx")

    create index(:eve_item_types, [:group_id], name: "eve_item_types_group_idx")

    create index(:eve_item_types, [:type_name], name: "eve_item_types_name_idx")
  end

  def down do
    drop_if_exists index(:eve_item_types, [:type_name], name: "eve_item_types_name_idx")

    drop_if_exists index(:eve_item_types, [:group_id], name: "eve_item_types_group_idx")

    drop_if_exists index(:eve_item_types, [:category_id], name: "eve_item_types_category_idx")

    drop_if_exists index(:eve_item_types, [:market_group_id],
                     name: "eve_item_types_market_group_idx"
                   )

    drop_if_exists index(:eve_item_types, ["type_name gin_trgm_ops"],
                     name: "eve_item_types_name_trgm_idx"
                   )

    drop_if_exists index(:eve_item_types, [:published], name: "eve_item_types_published_idx")

    drop_if_exists index(:eve_item_types, [:is_ship], name: "eve_item_types_ship_idx")

    drop_if_exists index(:eve_item_types, [:is_module], name: "eve_item_types_module_idx")

    alter table(:eve_item_types) do
      remove :updated_at
      remove :inserted_at
      remove :last_updated
      remove :sde_version
      remove :search_keywords
      remove :is_deployable
      remove :is_blueprint
      remove :is_charge
      remove :is_module
      remove :is_ship
      remove :published
      remove :tech_level
      remove :meta_level
      remove :base_price
      remove :capacity
      remove :volume
      remove :mass
      remove :market_group_name
      remove :market_group_id
      remove :category_name
      remove :category_id
      remove :group_name
      remove :group_id
      remove :description
      remove :type_name
    end

    drop_if_exists unique_index(
                     :participants,
                     [:killmail_id, :killmail_time, :character_id, :ship_type_id],
                     name: "participants_unique_participant_per_killmail_index"
                   )

    drop constraint(:participants, "participants_ship_type_id_fkey")

    drop constraint(:participants, "participants_weapon_type_id_fkey")

    alter table(:participants) do
      modify :weapon_type_id, :bigint
      modify :ship_type_id, :bigint
    end

    drop table(:eve_item_types)

    drop_if_exists index(:killmails_enriched, [:killmail_time],
                     name: "killmails_enriched_time_idx"
                   )

    drop_if_exists index(:killmails_enriched, [:victim_character_id],
                     name: "killmails_enriched_victim_character_idx"
                   )

    drop_if_exists index(:killmails_enriched, [:victim_corporation_id],
                     name: "killmails_enriched_victim_corp_idx"
                   )

    drop_if_exists index(:killmails_enriched, [:victim_alliance_id],
                     name: "killmails_enriched_victim_alliance_idx"
                   )

    drop_if_exists index(:killmails_enriched, [:solar_system_id],
                     name: "killmails_enriched_system_idx"
                   )

    drop_if_exists index(:killmails_enriched, [:total_value],
                     name: "killmails_enriched_value_idx"
                   )

    drop table(:killmails_enriched)

    drop_if_exists unique_index(:killmails_raw, [:killmail_id, :killmail_time],
                     name: "killmails_raw_unique_killmail_index"
                   )

    drop_if_exists unique_index(:killmails_raw, [:killmail_hash, :killmail_time],
                     name: "killmails_raw_unique_hash_time_index"
                   )

    drop table(:killmails_raw)

    drop_if_exists index(:participants, [:killmail_id, :killmail_time],
                     name: "participants_killmail_idx"
                   )

    drop_if_exists index(:participants, [:character_id], name: "participants_character_idx")

    drop_if_exists index(:participants, [:corporation_id], name: "participants_corporation_idx")

    drop_if_exists index(:participants, [:alliance_id], name: "participants_alliance_idx")

    drop_if_exists index(:participants, [:ship_type_id], name: "participants_ship_type_idx")

    drop_if_exists index(:participants, [:is_victim], name: "participants_victim_idx")

    drop_if_exists index(:participants, [:final_blow], name: "participants_final_blow_idx")

    drop_if_exists index(:participants, [:killmail_time], name: "participants_time_idx")

    drop table(:participants)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:eve_character_id],
                     name: "users_unique_eve_character_index"
                   )

    drop table(:users)
  end
end
