defmodule EveDmv.Repo.Migrations.AddMemberActivityIntelligence do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:member_activity_intelligence, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :character_id, :bigint, null: false
      add :character_name, :text, null: false
      add :corporation_id, :bigint, null: false
      add :corporation_name, :text, null: false
      add :alliance_id, :bigint
      add :alliance_name, :text
      add :activity_period_start, :utc_datetime, null: false
      add :activity_period_end, :utc_datetime, null: false
      add :analysis_generated_at, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')")
      add :total_pvp_kills, :bigint, default: 0
      add :total_pvp_losses, :bigint, default: 0
      add :home_defense_participations, :bigint, default: 0
      add :chain_operations_participations, :bigint, default: 0
      add :fleet_participations, :bigint, default: 0
      add :solo_activities, :bigint, default: 0
      add :engagement_score, :float, default: 0.0
      add :activity_trend, :text, default: "stable"
      add :burnout_risk_score, :bigint, default: 0
      add :disengagement_risk_score, :bigint, default: 0
      add :activity_patterns, :map, default: %{}
      add :participation_metrics, :map, default: %{}
      add :warning_indicators, :map, default: %{}
      add :timezone_analysis, :map, default: %{}
      add :corp_percentile_ranking, :bigint, default: 50
      add :peer_comparison_score, :float, default: 0.0

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:member_activity_intelligence, [:timezone_analysis],
             name: "member_timezone_analysis_gin_idx",
             using: "gin"
           )

    create index(:member_activity_intelligence, [:warning_indicators],
             name: "member_warning_indicators_gin_idx",
             using: "gin"
           )

    create index(:member_activity_intelligence, [:participation_metrics],
             name: "member_participation_metrics_gin_idx",
             using: "gin"
           )

    create index(:member_activity_intelligence, [:activity_patterns],
             name: "member_activity_patterns_gin_idx",
             using: "gin"
           )

    create index(:member_activity_intelligence, [:engagement_score])

    create index(:member_activity_intelligence, [:activity_period_end])

    create index(:member_activity_intelligence, [:activity_period_start])

    create index(:member_activity_intelligence, [:character_id])

    create index(:member_activity_intelligence, [:corporation_id])
  end

  def down do
    drop_if_exists index(:member_activity_intelligence, [:corporation_id])

    drop_if_exists index(:member_activity_intelligence, [:character_id])

    drop_if_exists index(:member_activity_intelligence, [:activity_period_start])

    drop_if_exists index(:member_activity_intelligence, [:activity_period_end])

    drop_if_exists index(:member_activity_intelligence, [:engagement_score])

    drop_if_exists index(:member_activity_intelligence, [:activity_patterns],
                     name: "member_activity_patterns_gin_idx"
                   )

    drop_if_exists index(:member_activity_intelligence, [:participation_metrics],
                     name: "member_participation_metrics_gin_idx"
                   )

    drop_if_exists index(:member_activity_intelligence, [:warning_indicators],
                     name: "member_warning_indicators_gin_idx"
                   )

    drop_if_exists index(:member_activity_intelligence, [:timezone_analysis],
                     name: "member_timezone_analysis_gin_idx"
                   )

    drop table(:member_activity_intelligence)
  end
end
