defmodule EveDmv.Repo.Migrations.AddChainIntelligenceResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:system_inhabitants, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :character_id, :bigint, null: false
      add :character_name, :text, null: false
      add :corporation_id, :bigint, null: false
      add :corporation_name, :text, null: false
      add :alliance_id, :bigint
      add :alliance_name, :text
      add :system_id, :bigint, null: false
      add :system_name, :text, null: false
      add :ship_type_id, :bigint
      add :ship_type_name, :text
      add :present, :boolean, null: false, default: true

      add :first_seen_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_seen_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :departure_time, :utc_datetime_usec
      add :threat_level, :text, null: false, default: "unknown"
      add :threat_score, :bigint, null: false, default: 50
      add :bait_probability, :bigint, null: false, default: 25
      add :notes, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :chain_topology_id, :uuid
    end

    create index(:system_inhabitants, [:threat_level, :present])

    create index(:system_inhabitants, [:chain_topology_id, :present])

    create index(:system_inhabitants, [:system_id, :present])

    create index(:system_inhabitants, [:corporation_id, :last_seen_at])

    create index(:system_inhabitants, [:character_id, :last_seen_at])

    create index(:system_inhabitants, [:chain_topology_id, :system_id, :character_id],
             unique: true
           )

    create table(:chain_topologies, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:system_inhabitants) do
      modify :chain_topology_id,
             references(:chain_topologies,
               column: :id,
               name: "system_inhabitants_chain_topology_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:chain_topologies) do
      add :map_id, :text, null: false
      add :map_name, :text
      add :corporation_id, :bigint, null: false
      add :alliance_id, :bigint
      add :topology_data, :map, null: false, default: %{}
      add :system_count, :bigint, null: false, default: 0
      add :connection_count, :bigint, null: false, default: 0
      add :last_activity_at, :utc_datetime_usec
      add :monitoring_enabled, :boolean, null: false, default: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:chain_topologies, [:corporation_id, :map_id])

    create index(:chain_topologies, [:updated_at])

    create index(:chain_topologies, [:map_id], unique: true)

    create table(:chain_connections, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :source_system_id, :bigint, null: false
      add :source_system_name, :text, null: false
      add :target_system_id, :bigint, null: false
      add :target_system_name, :text, null: false
      add :connection_type, :text, null: false, default: "unknown"
      add :wormhole_type, :text
      add :signature_id, :text
      add :mass_status, :text, null: false, default: "unknown"
      add :time_status, :text, null: false, default: "unknown"
      add :is_eol, :boolean, null: false, default: false
      add :mass_remaining_percent, :bigint
      add :estimated_eol_time, :utc_datetime_usec

      add :first_discovered_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_transit_at, :utc_datetime_usec
      add :ship_restrictions, :map, null: false, default: %{}
      add :notes, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :chain_topology_id,
          references(:chain_topologies,
            column: :id,
            name: "chain_connections_chain_topology_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create index(:chain_connections, [:is_eol])

    create index(:chain_connections, [:time_status])

    create index(:chain_connections, [:mass_status])

    create index(:chain_connections, [:connection_type])

    create index(:chain_connections, [:signature_id],
             unique: true,
             where: "signature_id IS NOT NULL"
           )

    create index(:chain_connections, [:chain_topology_id, :source_system_id, :target_system_id],
             unique: true
           )
  end

  def down do
    drop constraint(:chain_connections, "chain_connections_chain_topology_id_fkey")

    drop_if_exists index(:chain_connections, [
                     :chain_topology_id,
                     :source_system_id,
                     :target_system_id
                   ])

    drop_if_exists index(:chain_connections, [:signature_id])

    drop_if_exists index(:chain_connections, [:connection_type])

    drop_if_exists index(:chain_connections, [:mass_status])

    drop_if_exists index(:chain_connections, [:time_status])

    drop_if_exists index(:chain_connections, [:is_eol])

    drop table(:chain_connections)

    drop_if_exists index(:chain_topologies, [:map_id])

    drop_if_exists index(:chain_topologies, [:updated_at])

    drop_if_exists index(:chain_topologies, [:corporation_id, :map_id])

    alter table(:chain_topologies) do
      remove :updated_at
      remove :inserted_at
      remove :monitoring_enabled
      remove :last_activity_at
      remove :connection_count
      remove :system_count
      remove :topology_data
      remove :alliance_id
      remove :corporation_id
      remove :map_name
      remove :map_id
    end

    drop constraint(:system_inhabitants, "system_inhabitants_chain_topology_id_fkey")

    alter table(:system_inhabitants) do
      modify :chain_topology_id, :uuid
    end

    drop table(:chain_topologies)

    drop_if_exists index(:system_inhabitants, [:chain_topology_id, :system_id, :character_id])

    drop_if_exists index(:system_inhabitants, [:character_id, :last_seen_at])

    drop_if_exists index(:system_inhabitants, [:corporation_id, :last_seen_at])

    drop_if_exists index(:system_inhabitants, [:system_id, :present])

    drop_if_exists index(:system_inhabitants, [:chain_topology_id, :present])

    drop_if_exists index(:system_inhabitants, [:threat_level, :present])

    drop table(:system_inhabitants)
  end
end
