defmodule EveDmv.Repo.Migrations.AddWhFleetComposition do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:wh_fleet_composition, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :corporation_id, :bigint, null: false
      add :corporation_name, :text, null: false
      add :alliance_id, :bigint
      add :alliance_name, :text
      add :doctrine_name, :text, null: false
      add :doctrine_description, :text
      add :fleet_size_category, :text, null: false
      add :minimum_pilots, :bigint, default: 1
      add :optimal_pilots, :bigint, default: 5
      add :maximum_pilots, :bigint, default: 10
      add :created_by, :bigint
      add :last_updated_at, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')")
      add :effectiveness_rating, :float, default: 0.0
      add :usage_count, :bigint, default: 0
      add :success_rate, :float, default: 0.0
      add :doctrine_template, :map, default: %{}
      add :ship_requirements, :map, default: %{}
      add :pilot_assignments, :map, default: %{}
      add :skill_gaps, :map, default: %{}
      add :mass_calculations, :map, default: %{}
      add :optimization_results, :map, default: %{}
      add :current_readiness_percent, :bigint, default: 0
      add :pilots_available, :bigint, default: 0
      add :pilots_required, :bigint, default: 0
      add :estimated_form_up_time_minutes, :bigint, default: 30

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:wh_fleet_composition, [:optimization_results],
             name: "wh_fleet_optimization_gin_idx",
             using: "gin"
           )

    create index(:wh_fleet_composition, [:mass_calculations],
             name: "wh_fleet_mass_calculations_gin_idx",
             using: "gin"
           )

    create index(:wh_fleet_composition, [:skill_gaps],
             name: "wh_fleet_skill_gaps_gin_idx",
             using: "gin"
           )

    create index(:wh_fleet_composition, [:pilot_assignments],
             name: "wh_fleet_pilot_assignments_gin_idx",
             using: "gin"
           )

    create index(:wh_fleet_composition, [:ship_requirements],
             name: "wh_fleet_ship_requirements_gin_idx",
             using: "gin"
           )

    create index(:wh_fleet_composition, [:doctrine_template],
             name: "wh_fleet_doctrine_template_gin_idx",
             using: "gin"
           )

    create index(:wh_fleet_composition, [:last_updated_at])

    create index(:wh_fleet_composition, [:fleet_size_category])

    create index(:wh_fleet_composition, [:doctrine_name])

    create index(:wh_fleet_composition, [:alliance_id])

    create index(:wh_fleet_composition, [:corporation_id])
  end

  def down do
    drop_if_exists index(:wh_fleet_composition, [:corporation_id])

    drop_if_exists index(:wh_fleet_composition, [:alliance_id])

    drop_if_exists index(:wh_fleet_composition, [:doctrine_name])

    drop_if_exists index(:wh_fleet_composition, [:fleet_size_category])

    drop_if_exists index(:wh_fleet_composition, [:last_updated_at])

    drop_if_exists index(:wh_fleet_composition, [:doctrine_template],
                     name: "wh_fleet_doctrine_template_gin_idx"
                   )

    drop_if_exists index(:wh_fleet_composition, [:ship_requirements],
                     name: "wh_fleet_ship_requirements_gin_idx"
                   )

    drop_if_exists index(:wh_fleet_composition, [:pilot_assignments],
                     name: "wh_fleet_pilot_assignments_gin_idx"
                   )

    drop_if_exists index(:wh_fleet_composition, [:skill_gaps],
                     name: "wh_fleet_skill_gaps_gin_idx"
                   )

    drop_if_exists index(:wh_fleet_composition, [:mass_calculations],
                     name: "wh_fleet_mass_calculations_gin_idx"
                   )

    drop_if_exists index(:wh_fleet_composition, [:optimization_results],
                     name: "wh_fleet_optimization_gin_idx"
                   )

    drop table(:wh_fleet_composition)
  end
end
