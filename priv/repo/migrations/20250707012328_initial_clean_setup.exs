defmodule EveDmv.Repo.Migrations.InitialCleanSetup do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:eve_character_id, :bigint, null: false)
      add(:eve_character_name, :text, null: false)
      add(:eve_corporation_id, :bigint)
      add(:eve_corporation_name, :text)
      add(:eve_alliance_id, :bigint)
      add(:eve_alliance_name, :text)
      add(:access_token, :text)
      add(:refresh_token, :text)
      add(:token_expires_at, :utc_datetime)
      add(:scopes, {:array, :text}, default: [])
      add(:last_login_at, :utc_datetime)
      add(:is_admin, :boolean, null: false, default: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(unique_index(:users, [:eve_character_id], name: "users_unique_eve_character_index"))

    create table(:tokens, primary_key: false) do
      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:extra_data, :map)
      add(:purpose, :text, null: false)
      add(:expires_at, :utc_datetime, null: false)
      add(:subject, :text, null: false)
      add(:jti, :text, null: false, primary_key: true)
    end

    create table(:surveillance_profiles, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)
      add(:description, :text)
      add(:user_id, :uuid, null: false)
      add(:is_active, :boolean, null: false, default: true)
      add(:filter_tree, :map, null: false)
      add(:notification_settings, :map, null: false)
      add(:match_count, :bigint, null: false, default: 0)
      add(:last_match_at, :utc_datetime)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      index(:surveillance_profiles, [:user_id, :is_active],
        name: "surveillance_profiles_user_active_idx"
      )
    )

    create(index(:surveillance_profiles, [:is_active], name: "surveillance_profiles_active_idx"))

    create(index(:surveillance_profiles, [:user_id], name: "surveillance_profiles_user_idx"))

    create table(:surveillance_profile_matches, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :profile_id,
        references(:surveillance_profiles,
          column: :id,
          name: "surveillance_profile_matches_profile_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(:killmail_id, :bigint, null: false)
      add(:killmail_time, :utc_datetime, null: false)

      add(:matched_at, :utc_datetime,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:match_conditions, :map)
      add(:victim_character_name, :text)
      add(:victim_ship_name, :text)
      add(:solar_system_name, :text)
      add(:total_value, :decimal, precision: 15, scale: 2)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      index(:surveillance_profile_matches, [:profile_id, :matched_at],
        name: "profile_matches_profile_time_idx"
      )
    )

    create(index(:surveillance_profile_matches, [:matched_at], name: "profile_matches_time_idx"))

    create(
      index(:surveillance_profile_matches, [:killmail_id, :killmail_time],
        name: "profile_matches_killmail_idx"
      )
    )

    create(
      index(:surveillance_profile_matches, [:profile_id], name: "profile_matches_profile_idx")
    )

    create table(:surveillance_notifications, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :user_id,
        references(:users,
          column: :id,
          name: "surveillance_notifications_user_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(:notification_type, :text, null: false, default: "profile_match")

      add(
        :profile_id,
        references(:surveillance_profiles,
          column: :id,
          name: "surveillance_notifications_profile_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(:killmail_id, :bigint)
      add(:title, :text, null: false)
      add(:message, :text, null: false)
      add(:data, :map)
      add(:is_read, :boolean, null: false, default: false)
      add(:read_at, :utc_datetime)
      add(:priority, :text, null: false, default: "normal")

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(index(:surveillance_notifications, [:profile_id], name: "notifications_profile_idx"))

    create(
      index(:surveillance_notifications, [:notification_type], name: "notifications_type_idx")
    )

    create(index(:surveillance_notifications, [:is_read], name: "notifications_read_idx"))

    create(
      index(:surveillance_notifications, [:user_id, :inserted_at],
        name: "notifications_user_time_idx"
      )
    )

    create table(:ship_stats, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:ship_type_id, :bigint, null: false)
      add(:ship_name, :text, null: false)
      add(:ship_category, :text, null: false)
      add(:tech_level, :bigint, default: 1)
      add(:meta_level, :bigint, default: 0)
      add(:is_capital, :boolean, default: false)
      add(:total_kills, :bigint, default: 0)
      add(:total_losses, :bigint, default: 0)
      add(:solo_kills, :bigint, default: 0)
      add(:pilots_flown, :bigint, default: 0)
      add(:total_isk_destroyed, :decimal, default: "0.0", precision: 20, scale: 2)
      add(:total_isk_lost, :decimal, default: "0.0", precision: 20, scale: 2)
      add(:avg_kill_value, :decimal, default: "0.0", precision: 15, scale: 2)
      add(:avg_loss_value, :decimal, default: "0.0", precision: 15, scale: 2)
      add(:kill_death_ratio, :decimal, default: "0.0", precision: 10, scale: 2)
      add(:isk_efficiency_percent, :decimal, default: "0.0", precision: 5, scale: 2)
      add(:survival_rate_percent, :decimal, default: "0.0", precision: 5, scale: 2)
      add(:avg_damage_dealt, :decimal, default: "0.0", precision: 12, scale: 2)
      add(:avg_gang_size_when_killing, :decimal, default: "1.0", precision: 6, scale: 2)
      add(:avg_gang_size_when_dying, :decimal, default: "1.0", precision: 6, scale: 2)
      add(:solo_kill_percentage, :decimal, default: "0.0", precision: 5, scale: 2)
      add(:most_killed_ship_type_id, :bigint)
      add(:most_killed_ship_name, :text)
      add(:most_killed_by_ship_type_id, :bigint)
      add(:most_killed_by_ship_name, :text)
      add(:most_active_region_id, :bigint)
      add(:most_active_region_name, :text)
      add(:peak_activity_hour, :bigint)
      add(:usage_rank, :bigint)
      add(:effectiveness_rank, :bigint)
      add(:popularity_trend, :text, default: "stable")
      add(:meta_tier, :text, default: "unranked")
      add(:role_classification, :text, default: "mixed")
      add(:first_seen, :utc_datetime)
      add(:last_seen, :utc_datetime)
      add(:stats_period_start, :utc_datetime)
      add(:stats_period_end, :utc_datetime)
      add(:last_updated, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(unique_index(:ship_stats, [:ship_type_id], name: "ship_stats_unique_ship_index"))

    create table(:player_stats, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:character_id, :bigint, null: false)
      add(:character_name, :text, null: false)
      add(:total_kills, :bigint, default: 0)
      add(:total_losses, :bigint, default: 0)
      add(:solo_kills, :bigint, default: 0)
      add(:solo_losses, :bigint, default: 0)
      add(:gang_kills, :bigint, default: 0)
      add(:gang_losses, :bigint, default: 0)
      add(:total_isk_destroyed, :decimal, default: "0.0", precision: 20, scale: 2)
      add(:total_isk_lost, :decimal, default: "0.0", precision: 20, scale: 2)
      add(:kill_death_ratio, :decimal, default: "0.0", precision: 10, scale: 2)
      add(:isk_efficiency_percent, :decimal, default: "0.0", precision: 5, scale: 2)
      add(:solo_performance_ratio, :decimal, default: "0.0", precision: 10, scale: 2)
      add(:first_kill_date, :utc_datetime)
      add(:last_kill_date, :utc_datetime)
      add(:active_days, :bigint, default: 0)
      add(:avg_kills_per_week, :decimal, default: "0.0", precision: 8, scale: 2)
      add(:ship_types_used, :bigint, default: 0)
      add(:favorite_ship_type_id, :bigint)
      add(:favorite_ship_name, :text)
      add(:avg_gang_size, :decimal, default: "1.0", precision: 6, scale: 2)
      add(:preferred_gang_size, :text, default: "solo")
      add(:active_regions, :bigint, default: 0)
      add(:home_region_id, :bigint)
      add(:home_region_name, :text)
      add(:danger_rating, :bigint, default: 1)
      add(:primary_activity, :text, default: "solo_pvp")
      add(:stats_period_start, :utc_datetime)
      add(:stats_period_end, :utc_datetime)
      add(:last_updated, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      unique_index(:player_stats, [:character_id], name: "player_stats_unique_character_index")
    )

    create table(:participants, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:killmail_id, :bigint, null: false)
      add(:killmail_time, :utc_datetime, null: false)
      add(:character_id, :bigint)
      add(:character_name, :text)
      add(:corporation_id, :bigint)
      add(:corporation_name, :text)
      add(:alliance_id, :bigint)
      add(:alliance_name, :text)
      add(:faction_id, :bigint)
      add(:faction_name, :text)
      add(:ship_type_id, :bigint, null: false)
      add(:ship_name, :text)
      add(:weapon_type_id, :bigint)
      add(:weapon_name, :text)
      add(:damage_done, :bigint, null: false, default: 0)
      add(:security_status, :decimal, precision: 5, scale: 2)
      add(:is_victim, :boolean, null: false, default: false)
      add(:final_blow, :boolean, null: false, default: false)
      add(:is_npc, :boolean, null: false, default: false)
      add(:solar_system_id, :bigint, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(index(:participants, [:killmail_time], name: "participants_time_idx"))

    create(index(:participants, [:final_blow], name: "participants_final_blow_idx"))

    create(index(:participants, [:is_victim], name: "participants_victim_idx"))

    create(index(:participants, [:ship_type_id], name: "participants_ship_type_idx"))

    create(index(:participants, [:alliance_id], name: "participants_alliance_idx"))

    create(index(:participants, [:corporation_id], name: "participants_corporation_idx"))

    create(index(:participants, [:character_id], name: "participants_character_idx"))

    create(
      index(:participants, [:killmail_id, :killmail_time], name: "participants_killmail_idx")
    )

    create table(:killmails_raw, primary_key: false) do
      add(:killmail_id, :bigint, null: false, primary_key: true)
      add(:killmail_time, :utc_datetime, null: false, primary_key: true)
      add(:killmail_hash, :text, null: false)
      add(:solar_system_id, :bigint, null: false)
      add(:victim_character_id, :bigint)
      add(:victim_corporation_id, :bigint)
      add(:victim_alliance_id, :bigint)
      add(:victim_ship_type_id, :bigint, null: false)
      add(:attacker_count, :bigint, null: false, default: 0)
      add(:raw_data, :map, null: false)
      add(:source, :text, null: false, default: "wanderer-kills")

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      unique_index(:killmails_raw, [:killmail_hash, :killmail_time],
        name: "killmails_raw_unique_hash_time_index"
      )
    )

    create(
      unique_index(:killmails_raw, [:killmail_id, :killmail_time],
        name: "killmails_raw_unique_killmail_index"
      )
    )

    create table(:killmails_enriched, primary_key: false) do
      add(:killmail_id, :bigint, null: false, primary_key: true)
      add(:killmail_time, :utc_datetime, null: false, primary_key: true)
      add(:victim_character_id, :bigint)
      add(:victim_character_name, :text)
      add(:victim_corporation_id, :bigint)
      add(:victim_corporation_name, :text)
      add(:victim_alliance_id, :bigint)
      add(:victim_alliance_name, :text)
      add(:solar_system_id, :bigint, null: false)
      add(:solar_system_name, :text)
      add(:victim_ship_type_id, :bigint, null: false)
      add(:victim_ship_name, :text)
      add(:total_value, :decimal, precision: 15, scale: 2)
      add(:ship_value, :decimal, precision: 15, scale: 2)
      add(:fitted_value, :decimal, precision: 15, scale: 2)
      add(:attacker_count, :bigint, null: false, default: 0)
      add(:final_blow_character_id, :bigint)
      add(:final_blow_character_name, :text)
      add(:kill_category, :text)
      add(:victim_ship_category, :text)
      add(:module_tags, {:array, :text}, default: [])
      add(:noteworthy_modules, {:array, :text}, default: [])
      add(:enriched_at, :utc_datetime)
      add(:price_data_source, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(index(:killmails_enriched, [:total_value], name: "killmails_enriched_value_idx"))

    create(index(:killmails_enriched, [:solar_system_id], name: "killmails_enriched_system_idx"))

    create(
      index(:killmails_enriched, [:victim_alliance_id],
        name: "killmails_enriched_victim_alliance_idx"
      )
    )

    create(
      index(:killmails_enriched, [:victim_corporation_id],
        name: "killmails_enriched_victim_corp_idx"
      )
    )

    create(
      index(:killmails_enriched, [:victim_character_id],
        name: "killmails_enriched_victim_character_idx"
      )
    )

    create(index(:killmails_enriched, [:killmail_time], name: "killmails_enriched_time_idx"))

    create table(:eve_solar_systems, primary_key: false) do
      add(:system_id, :bigint, null: false, primary_key: true)
      add(:system_name, :text, null: false)
      add(:region_id, :bigint)
      add(:region_name, :text)
      add(:constellation_id, :bigint)
      add(:constellation_name, :text)
      add(:security_status, :decimal, precision: 15, scale: 10)
      add(:security_class, :text)
      add(:x, :decimal, precision: 25, scale: 2)
      add(:y, :decimal, precision: 25, scale: 2)
      add(:z, :decimal, precision: 25, scale: 2)
      add(:sde_version, :text)
      add(:last_updated, :utc_datetime)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      index(:eve_solar_systems, ["system_name gin_trgm_ops"],
        name: "eve_solar_systems_name_trgm_idx",
        using: "gin"
      )
    )

    create(index(:eve_solar_systems, [:security_status], name: "eve_solar_systems_security_idx"))

    create(
      index(:eve_solar_systems, [:constellation_id], name: "eve_solar_systems_constellation_idx")
    )

    create(index(:eve_solar_systems, [:region_id], name: "eve_solar_systems_region_idx"))

    create(index(:eve_solar_systems, [:system_name], name: "eve_solar_systems_name_idx"))

    create(
      unique_index(:eve_solar_systems, [:system_id], name: "eve_solar_systems_system_id_index")
    )

    alter table(:killmails_enriched) do
      modify(
        :solar_system_id,
        references(:eve_solar_systems,
          column: :system_id,
          name: "killmails_enriched_solar_system_id_fkey",
          type: :bigint,
          prefix: "public"
        )
      )
    end

    create table(:eve_item_types, primary_key: false) do
      add(:type_id, :bigint, null: false, primary_key: true)
      add(:type_name, :text, null: false)
      add(:description, :text)
      add(:group_id, :bigint)
      add(:group_name, :text)
      add(:category_id, :bigint)
      add(:category_name, :text)
      add(:market_group_id, :bigint)
      add(:market_group_name, :text)
      add(:mass, :decimal, precision: 15, scale: 4)
      add(:volume, :decimal, precision: 15, scale: 4)
      add(:capacity, :decimal, precision: 15, scale: 4)
      add(:base_price, :decimal, precision: 15, scale: 2)
      add(:meta_level, :bigint)
      add(:tech_level, :bigint)
      add(:published, :boolean, null: false, default: true)
      add(:is_ship, :boolean, null: false, default: false)
      add(:is_module, :boolean, null: false, default: false)
      add(:is_charge, :boolean, null: false, default: false)
      add(:is_blueprint, :boolean, null: false, default: false)
      add(:is_deployable, :boolean, null: false, default: false)
      add(:search_keywords, {:array, :text}, default: [])
      add(:sde_version, :text)
      add(:last_updated, :utc_datetime)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      index(:eve_item_types, [:search_keywords],
        name: "eve_item_types_search_keywords_gin_idx",
        using: "gin"
      )
    )

    create(index(:eve_item_types, [:is_module], name: "eve_item_types_module_idx"))

    create(index(:eve_item_types, [:is_ship], name: "eve_item_types_ship_idx"))

    create(index(:eve_item_types, [:published], name: "eve_item_types_published_idx"))

    create(
      index(:eve_item_types, ["type_name gin_trgm_ops"],
        name: "eve_item_types_name_trgm_idx",
        using: "gin"
      )
    )

    create(index(:eve_item_types, [:market_group_id], name: "eve_item_types_market_group_idx"))

    create(index(:eve_item_types, [:category_id], name: "eve_item_types_category_idx"))

    create(index(:eve_item_types, [:group_id], name: "eve_item_types_group_idx"))

    create(index(:eve_item_types, [:type_name], name: "eve_item_types_name_idx"))

    create(unique_index(:eve_item_types, [:type_id], name: "eve_item_types_type_id_index"))

    alter table(:participants) do
      modify(
        :ship_type_id,
        references(:eve_item_types,
          column: :type_id,
          name: "participants_ship_type_id_fkey",
          type: :bigint,
          prefix: "public"
        )
      )

      modify(
        :weapon_type_id,
        references(:eve_item_types,
          column: :type_id,
          name: "participants_weapon_type_id_fkey",
          type: :bigint,
          prefix: "public"
        )
      )
    end

    create(
      unique_index(:participants, [:killmail_id, :killmail_time, :character_id, :ship_type_id],
        name: "participants_unique_participant_per_killmail_index"
      )
    )

    alter table(:killmails_enriched) do
      modify(
        :victim_ship_type_id,
        references(:eve_item_types,
          column: :type_id,
          name: "killmails_enriched_victim_ship_type_id_fkey",
          type: :bigint,
          prefix: "public"
        )
      )
    end

    create(
      unique_index(:killmails_enriched, [:killmail_id, :killmail_time],
        name: "killmails_enriched_unique_killmail_index"
      )
    )

    create table(:character_stats, primary_key: false) do
      add(:id, :bigserial, null: false, primary_key: true)
      add(:character_id, :bigint, null: false)
      add(:character_name, :text, null: false)
      add(:corporation_id, :bigint)
      add(:corporation_name, :text)
      add(:alliance_id, :bigint)
      add(:alliance_name, :text)
      add(:total_kills, :bigint, default: 0)
      add(:total_losses, :bigint, default: 0)
      add(:solo_kills, :bigint, default: 0)
      add(:solo_losses, :bigint, default: 0)
      add(:ship_usage, :map, default: %{})
      add(:frequent_associates, :map, default: %{})
      add(:active_systems, :map, default: %{})
      add(:target_profile, :map, default: %{})
      add(:aggression_index, :float, default: 0.0)
      add(:avg_gang_size, :float, default: 1.0)
      add(:prime_timezone, :text)
      add(:home_system_id, :bigint)
      add(:home_system_name, :text)
      add(:uses_cynos, :boolean, default: false)
      add(:flies_capitals, :boolean, default: false)
      add(:has_logi_support, :boolean, default: false)
      add(:awox_probability, :float, default: 0.0)
      add(:batphone_probability, :text, default: "low")
      add(:isk_efficiency, :float, default: 50.0)
      add(:kill_death_ratio, :float, default: 1.0)
      add(:dangerous_rating, :bigint, default: 3)
      add(:identified_weaknesses, :map, default: %{})

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:last_calculated_at, :utc_datetime_usec)
      add(:data_completeness, :bigint, default: 0)
    end

    create(
      index(:character_stats, [:identified_weaknesses],
        name: "character_stats_identified_weaknesses_gin_idx",
        using: "gin"
      )
    )

    create(
      index(:character_stats, [:target_profile],
        name: "character_stats_target_profile_gin_idx",
        using: "gin"
      )
    )

    create(
      index(:character_stats, [:active_systems],
        name: "character_stats_active_systems_gin_idx",
        using: "gin"
      )
    )

    create(
      index(:character_stats, [:frequent_associates],
        name: "character_stats_frequent_associates_gin_idx",
        using: "gin"
      )
    )

    create(
      index(:character_stats, [:ship_usage],
        name: "character_stats_ship_usage_gin_idx",
        using: "gin"
      )
    )

    create table(:api_keys, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:api_key, :text, null: false)
      add(:character_id, :bigint, null: false)
      add(:name, :text, null: false)
      add(:permissions, {:array, :text}, default: [])
      add(:last_used_at, :utc_datetime)
      add(:last_used_ip, :text)
      add(:is_active, :boolean, default: true)
      add(:expires_at, :utc_datetime)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end
  end

  def down do
    drop(table(:api_keys))

    drop_if_exists(
      index(:character_stats, [:ship_usage], name: "character_stats_ship_usage_gin_idx")
    )

    drop_if_exists(
      index(:character_stats, [:frequent_associates],
        name: "character_stats_frequent_associates_gin_idx"
      )
    )

    drop_if_exists(
      index(:character_stats, [:active_systems], name: "character_stats_active_systems_gin_idx")
    )

    drop_if_exists(
      index(:character_stats, [:target_profile], name: "character_stats_target_profile_gin_idx")
    )

    drop_if_exists(
      index(:character_stats, [:identified_weaknesses],
        name: "character_stats_identified_weaknesses_gin_idx"
      )
    )

    drop(table(:character_stats))

    drop_if_exists(
      unique_index(:killmails_enriched, [:killmail_id, :killmail_time],
        name: "killmails_enriched_unique_killmail_index"
      )
    )

    drop(constraint(:killmails_enriched, "killmails_enriched_victim_ship_type_id_fkey"))

    alter table(:killmails_enriched) do
      modify(:victim_ship_type_id, :bigint)
    end

    drop_if_exists(
      unique_index(:participants, [:killmail_id, :killmail_time, :character_id, :ship_type_id],
        name: "participants_unique_participant_per_killmail_index"
      )
    )

    drop(constraint(:participants, "participants_ship_type_id_fkey"))

    drop(constraint(:participants, "participants_weapon_type_id_fkey"))

    alter table(:participants) do
      modify(:weapon_type_id, :bigint)
      modify(:ship_type_id, :bigint)
    end

    drop_if_exists(
      unique_index(:eve_item_types, [:type_id], name: "eve_item_types_type_id_index")
    )

    drop_if_exists(index(:eve_item_types, [:type_name], name: "eve_item_types_name_idx"))

    drop_if_exists(index(:eve_item_types, [:group_id], name: "eve_item_types_group_idx"))

    drop_if_exists(index(:eve_item_types, [:category_id], name: "eve_item_types_category_idx"))

    drop_if_exists(
      index(:eve_item_types, [:market_group_id], name: "eve_item_types_market_group_idx")
    )

    drop_if_exists(
      index(:eve_item_types, ["type_name gin_trgm_ops"], name: "eve_item_types_name_trgm_idx")
    )

    drop_if_exists(index(:eve_item_types, [:published], name: "eve_item_types_published_idx"))

    drop_if_exists(index(:eve_item_types, [:is_ship], name: "eve_item_types_ship_idx"))

    drop_if_exists(index(:eve_item_types, [:is_module], name: "eve_item_types_module_idx"))

    drop_if_exists(
      index(:eve_item_types, [:search_keywords], name: "eve_item_types_search_keywords_gin_idx")
    )

    drop(table(:eve_item_types))

    drop(constraint(:killmails_enriched, "killmails_enriched_solar_system_id_fkey"))

    alter table(:killmails_enriched) do
      modify(:solar_system_id, :bigint)
    end

    drop_if_exists(
      unique_index(:eve_solar_systems, [:system_id], name: "eve_solar_systems_system_id_index")
    )

    drop_if_exists(index(:eve_solar_systems, [:system_name], name: "eve_solar_systems_name_idx"))

    drop_if_exists(index(:eve_solar_systems, [:region_id], name: "eve_solar_systems_region_idx"))

    drop_if_exists(
      index(:eve_solar_systems, [:constellation_id], name: "eve_solar_systems_constellation_idx")
    )

    drop_if_exists(
      index(:eve_solar_systems, [:security_status], name: "eve_solar_systems_security_idx")
    )

    drop_if_exists(
      index(:eve_solar_systems, ["system_name gin_trgm_ops"],
        name: "eve_solar_systems_name_trgm_idx"
      )
    )

    drop(table(:eve_solar_systems))

    drop_if_exists(
      index(:killmails_enriched, [:killmail_time], name: "killmails_enriched_time_idx")
    )

    drop_if_exists(
      index(:killmails_enriched, [:victim_character_id],
        name: "killmails_enriched_victim_character_idx"
      )
    )

    drop_if_exists(
      index(:killmails_enriched, [:victim_corporation_id],
        name: "killmails_enriched_victim_corp_idx"
      )
    )

    drop_if_exists(
      index(:killmails_enriched, [:victim_alliance_id],
        name: "killmails_enriched_victim_alliance_idx"
      )
    )

    drop_if_exists(
      index(:killmails_enriched, [:solar_system_id], name: "killmails_enriched_system_idx")
    )

    drop_if_exists(
      index(:killmails_enriched, [:total_value], name: "killmails_enriched_value_idx")
    )

    drop(table(:killmails_enriched))

    drop_if_exists(
      unique_index(:killmails_raw, [:killmail_id, :killmail_time],
        name: "killmails_raw_unique_killmail_index"
      )
    )

    drop_if_exists(
      unique_index(:killmails_raw, [:killmail_hash, :killmail_time],
        name: "killmails_raw_unique_hash_time_index"
      )
    )

    drop(table(:killmails_raw))

    drop_if_exists(
      index(:participants, [:killmail_id, :killmail_time], name: "participants_killmail_idx")
    )

    drop_if_exists(index(:participants, [:character_id], name: "participants_character_idx"))

    drop_if_exists(index(:participants, [:corporation_id], name: "participants_corporation_idx"))

    drop_if_exists(index(:participants, [:alliance_id], name: "participants_alliance_idx"))

    drop_if_exists(index(:participants, [:ship_type_id], name: "participants_ship_type_idx"))

    drop_if_exists(index(:participants, [:is_victim], name: "participants_victim_idx"))

    drop_if_exists(index(:participants, [:final_blow], name: "participants_final_blow_idx"))

    drop_if_exists(index(:participants, [:killmail_time], name: "participants_time_idx"))

    drop(table(:participants))

    drop_if_exists(
      unique_index(:player_stats, [:character_id], name: "player_stats_unique_character_index")
    )

    drop(table(:player_stats))

    drop_if_exists(
      unique_index(:ship_stats, [:ship_type_id], name: "ship_stats_unique_ship_index")
    )

    drop(table(:ship_stats))

    drop(constraint(:surveillance_notifications, "surveillance_notifications_user_id_fkey"))

    drop(constraint(:surveillance_notifications, "surveillance_notifications_profile_id_fkey"))

    drop_if_exists(
      index(:surveillance_notifications, [:user_id, :inserted_at],
        name: "notifications_user_time_idx"
      )
    )

    drop_if_exists(index(:surveillance_notifications, [:is_read], name: "notifications_read_idx"))

    drop_if_exists(
      index(:surveillance_notifications, [:notification_type], name: "notifications_type_idx")
    )

    drop_if_exists(
      index(:surveillance_notifications, [:profile_id], name: "notifications_profile_idx")
    )

    drop(table(:surveillance_notifications))

    drop(
      constraint(:surveillance_profile_matches, "surveillance_profile_matches_profile_id_fkey")
    )

    drop_if_exists(
      index(:surveillance_profile_matches, [:profile_id], name: "profile_matches_profile_idx")
    )

    drop_if_exists(
      index(:surveillance_profile_matches, [:killmail_id, :killmail_time],
        name: "profile_matches_killmail_idx"
      )
    )

    drop_if_exists(
      index(:surveillance_profile_matches, [:matched_at], name: "profile_matches_time_idx")
    )

    drop_if_exists(
      index(:surveillance_profile_matches, [:profile_id, :matched_at],
        name: "profile_matches_profile_time_idx"
      )
    )

    drop(table(:surveillance_profile_matches))

    drop_if_exists(
      index(:surveillance_profiles, [:user_id], name: "surveillance_profiles_user_idx")
    )

    drop_if_exists(
      index(:surveillance_profiles, [:is_active], name: "surveillance_profiles_active_idx")
    )

    drop_if_exists(
      index(:surveillance_profiles, [:user_id, :is_active],
        name: "surveillance_profiles_user_active_idx"
      )
    )

    drop(table(:surveillance_profiles))

    drop(table(:tokens))

    drop_if_exists(
      unique_index(:users, [:eve_character_id], name: "users_unique_eve_character_index")
    )

    drop(table(:users))
  end
end
